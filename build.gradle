import java.awt.Color

plugins {
    id 'java-library'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id "com.modrinth.minotaur" version "2.+"
    id 'maven-publish'
}

group = 'me.quickscythe'
version = "${plugin_version}-${minecraft_version}-${build_status}-B${build_number}"

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "quipt"
        url = "https://repo.vanillaflux.com/repository/quipt/"
    }
}

dependencies {

    implementation "io.papermc.paper:paper-api:${minecraft_version}-${paper_version}"

    implementation "me.quickscythe:quipt-core:${quipt_core_version}"
    implementation "me.quickscythe:quipt-bot:${quipt_bot_version}"
    implementation "org.json:json:$json_version"
    implementation "org.eclipse.jgit:org.eclipse.jgit:$jgit_version"
}
tasks {
    runServer {
        minecraftVersion("${minecraft_version}")
    }
}

def targetJavaVersion = 21
java {
    withSourcesJar()
    withJavadocJar()
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}


processResources {
    def pluginProperties = [minecraft_version: minecraft_version, author: author, name: rootProject.name, plugin_version: plugin_version, quipt_core_version: quipt_core_version, quipt_bot_version: quipt_bot_version, json_version: json_version, jgit_version: jgit_version]
    inputs.properties pluginProperties
    filteringCharset 'UTF-8'

    filesMatching('paper-plugin.yml') {
        expand pluginProperties
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name = 'localRepo'
            url = layout.buildDirectory.dir("repo")
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    def log = System.getenv("CHANGELOG")
    if (log != null) changelog = log else changelog = file("changelog.md").text
    projectId = "${modrinth_id}"
    versionNumber = "${version}"
    versionType = "${build_status}"
    gameVersions = ["1.21", "1.21.1", "1.21.2", "1.21.3", "1.21.4"]
    uploadFile = jar
    loaders = ["paper"]
    syncBodyFrom = file("readme.md").text
    dependencies {}
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)


task sendDataToUrl {
    doLast {
        try {
            URL url = new URL("https://discord.com/api/webhooks/1331731988230443150/gYnT_JblP6gz4Ztb3g94eebS9pwxdMdsrefTY3_yAiDKwkGr0CjvYp41v46yuniyoPCv")
            HttpURLConnection connection = (HttpURLConnection) url.openConnection()
            connection.setRequestMethod("POST")
            connection.setRequestProperty("Content-Type", "application/json; utf-8")
            connection.setRequestProperty("Accept", "application/json")
            connection.setDoOutput(true)


            String jsonInputString = "{\"embeds\":[{\"title\": \"Update Received\", \"description\": \"A new version of ${rootProject.name} has been uploaded to Modrinth.\", \"color\":1638162,\"fields\":[{\"name\":\"Version\",\"value\":\"${version}\",\"inline\":true},{\"name\":\"Download\",\"value\":\"[here](https://modrinth.com/plugin/${modrinth_id}/version/${version})\",\"inline\":true}]}]}"

            try (OutputStream os = connection.getOutputStream()) {
                byte[] input = jsonInputString.getBytes("utf-8")
                os.write(input, 0, input.length)
            }

            int responseCode = connection.getResponseCode()
            System.out.println("Response Code: " + responseCode)
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

tasks.modrinth.dependsOn sendDataToUrl

tasks.register('copyGradleProperties', Copy) {
    from 'gradle.properties'
    into "src/main/resources/"
}

tasks.processResources.dependsOn(copyGradleProperties)
tasks.sourcesJar.dependsOn(copyGradleProperties)